// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma migrate dev --name explication_migrate  --schema src/database/prisma/schema.prisma
// npx prisma migrate dev --create-only  --schema src/database/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    Int                   @id @default(autoincrement())
  creation_date         DateTime              @default(now())
  role                  Roles                 @relation(fields: [id_role], references: [id])
  id_role               Int
  email                 String                @db.VarChar(150)
  password              String?               @db.VarChar(250)
  facebook_token        String?               @db.VarChar(250)
  username              String?               @db.VarChar(150)
  firstname             String?               @db.VarChar(150)
  lastname              String?               @db.VarChar(150)
  phone_number          String?               @db.VarChar(20)
  adoptionRequests      AdoptionRequests[]
  messages              Messages[]
}

model Roles {
  id                    Int                   @id @default(autoincrement())
  name                  String                @db.VarChar(100)
  users                 Users[]
}

model Offers {
  id                    Int                   @id @default(autoincrement())
  creation_date         DateTime              @default(now())
  adoption_date         DateTime?             @db.Timestamp()
  status                OfferStatus           @relation(fields: [id_status], references: [id])
  id_status             Int
  animal_name           String?               @db.VarChar(150)
  age                   Int
  category              Categories            @relation(fields: [id_category], references: [id])
  id_category           Int
  race                  Races?                 @relation(fields: [id_race], references: [id])
  id_race               Int?
  zipcode               Int
  city                  String                @db.VarChar(150)
  identified            Boolean               @db.TinyInt()
  vaccinated            Boolean               @db.TinyInt()
  disabled              Boolean               @db.TinyInt()
  disability            String?               @db.VarChar(250)
  description           String?               @db.LongText
  photos                Photos[]
  adoptionRequests      AdoptionRequests[]
}

model OfferStatus {
  id                    Int                   @id @default(autoincrement())
  name                  String                @db.VarChar(100)
  offers                Offers[]
}

model Categories {
  id                    Int                   @id @default(autoincrement())
  name                  String                @db.VarChar(100)
  parent_category       Categories?           @relation("ParentCategory", fields: [id_parent_category], references: [id])
  id_parent_category    Int?
  offers                Offers[]
  children              Categories[]          @relation("ParentCategory")
  races                 Races[]
}

model Races {
  id                    Int                   @id @default(autoincrement())
  category              Categories            @relation(fields: [id_category], references: [id])
  id_category           Int
  name                  String                @db.VarChar(100)
  offers                Offers[]
}

model Photos {
  id                    Int                   @id @default(autoincrement())
  offer                 Offers                @relation(fields: [id_offer], references: [id])
  id_offer              Int
  main                  Boolean               @db.TinyInt()
  path                  String                @db.VarChar(250)
}

model AdoptionRequests {
  id                    Int                   @id @default(autoincrement())
  offer                 Offers                @relation(fields: [id_offer], references: [id])
  id_offer              Int
  creation_date         DateTime              @default(now())
  candidate_contact     String                @db.VarChar(150)
  candidate             Users?                @relation(fields: [id_candidate], references: [id])
  id_candidate          Int?
  status                AdoptionStatus?       @relation(fields: [id_adoption_status], references: [id])
  id_adoption_status    Int
  messages              Messages[]
}

model AdoptionStatus {
  id                    Int                   @id @default(autoincrement())
  name                  String                @db.VarChar(100)
  adoptionRequests      AdoptionRequests[]
}

model Messages {
  id                    Int                   @id @default(autoincrement())
  adoption_request       AdoptionRequests      @relation(fields: [id_adoption_request], references: [id])
  id_adoption_request    Int
  creation_date         DateTime              @default(now())
  author                Users?                @relation(fields: [id_author], references: [id])
  id_author             Int?
  text                  String                @db.LongText
}